{"version":3,"sources":["app.setting.ts"],"names":["AppSettings","getRequestOptions","http_1","RequestOptions","headers","Headers","Content-Type","handleError","error","sessionStorage","removeItem","AUTH_KEY","console","Observable_1","Observable","throw","json","logout","isLoggedIn","getItem","setAuth","jWT","setItem","JSON","stringify","getAuth","authKey","parse","this","DROPDOWN_TEXT","SERVER_IP"],"mappings":"yRAIAA,YAAA,WAAA,QAAAA,gBAoDA,MA5CkBA,aAAAC,kBAAd,WACI,MAAO,IAAIC,QAAAC,gBACPC,QAAS,GAAIF,QAAAG,SACTC,eAAgB,wBAKdN,YAAAO,YAAd,SAA0BC,OAMtB,MAHAC,gBAAeC,WAAWV,YAAYW,UACtCC,QAAQJ,MAAMA,OAEPK,aAAAC,WAAWC,MAAMP,MAAMQ,OAAOR,OAAS,iBAGpCR,YAAAiB,OAAd,WAEI,MADAR,gBAAeC,WAAWV,YAAYW,WAC/B,GAGGX,YAAAkB,WAAd,WACI,MAAuD,OAAhDT,eAAeU,QAAQnB,YAAYW,WAGhCX,YAAAoB,QAAd,SAAsBC,KAElBZ,eAAeC,WAAWV,YAAYW,UACtCF,eAAea,QAAQtB,YAAYW,SAAUY,KAAKC,UAAUH,OAIlDrB,YAAAyB,QAAd,WACI,GAAIC,SAAUjB,eAAeU,QAAQnB,YAAYW,SACjD,OAAIe,SACOH,KAAKI,MAAMD,UAGlBE,KAAKX,SACE,OAInBjB,eAlDkBA,YAAA6B,cAAgB,iBAEhB7B,YAAA8B,UAAY,8BAEZ9B,YAAAW,SAAW","file":"app.setting.js","sourcesContent":["import { Headers, Response, RequestOptions} from \"@angular/http\";\r\nimport {Observable} from \"rxjs/Observable\";\r\nimport {JWT} from './models/JWT'\r\n\r\nexport class AppSettings {\r\n\r\n    public static DROPDOWN_TEXT = \"(Not Selected)\";\r\n\r\n    public static SERVER_IP = \"http://localhost:63519/api/\";\r\n\r\n    public static AUTH_KEY = \"authKey\";\r\n\r\n    public static getRequestOptions() {\r\n        return new RequestOptions({\r\n            headers: new Headers({\r\n                \"Content-Type\": \"application/json\"\r\n            })\r\n        });\r\n    }\r\n\r\n    public static handleError(error: Response) {\r\n        // output errors to the console.\r\n\r\n        sessionStorage.removeItem(AppSettings.AUTH_KEY);\r\n        console.error(error);\r\n      \r\n        return Observable.throw(error.json().error || 'Server error');\r\n    }\r\n\r\n    public static logout():boolean {\r\n        sessionStorage.removeItem(AppSettings.AUTH_KEY);\r\n        return false;\r\n    }\r\n\r\n    public static isLoggedIn(): boolean {\r\n        return sessionStorage.getItem(AppSettings.AUTH_KEY) != null;\r\n    }\r\n\r\n    public static setAuth(jWT: JWT) {\r\n\r\n        sessionStorage.removeItem(AppSettings.AUTH_KEY);\r\n        sessionStorage.setItem(AppSettings.AUTH_KEY, JSON.stringify(jWT));\r\n\r\n    }\r\n\r\n    public static getAuth(): JWT {\r\n        let authKey = sessionStorage.getItem(AppSettings.AUTH_KEY);\r\n        if (authKey) {\r\n            return JSON.parse(authKey);\r\n        }\r\n        else {\r\n            this.logout();\r\n            return null;\r\n        }\r\n    }\r\n\r\n}\r\n"]}