{"version":3,"sources":["modules/spotify/components/spotify.component.ts"],"names":["SpotifyComponent","_spotifyService","this","searchControl","forms_1","FormControl","isLoading","artists","prototype","ngOnInit","_this","valueChanges","filter","text","length","debounceTime","distinctUntilChanged","subscribe","value","read","data","items","onRead","id","onInsert","objSpotify","spotify_1","Spotify","create","console","log","onUpdate","update","error","onDelete","delete","toString","__decorate","core_1","Component","selector","templateUrl","styles","spotify_service_1","SpotifyService"],"mappings":"oiCAsBaA,iBAAgB,WAMzB,QAAAA,kBAAoBC,iBAAAC,KAAAD,gBAAAA,gBAJbC,KAAAC,cAAgB,GAAIC,SAAAC,YACpBH,KAAAI,WAAqB,EACrBJ,KAAAK,WAoFX,MAhFIP,kBAAAQ,UAAAC,SAAA,WAAA,GAAAC,OAAAR,IACIA,MAAKC,cAAcQ,aACdC,OAAO,SAAAC,MAAQ,MAAAA,MAAKC,OAAS,IAC7BC,aAAa,KACbC,uBACAC,UAAU,SAAAC,OACPR,MAAKJ,WAAY,EACjBI,MAAKH,WACLG,MAAKT,gBAAgBkB,KAAKD,OACrBD,UAAU,SAAAG,MACPV,MAAKJ,WAAY,EACjBI,MAAKH,QAAUa,KAAKb,QAAQc,WAMzCrB,iBAAAQ,UAAAc,OAAP,SAAcC,IACVrB,KAAKD,gBAAgBkB,KAAKI,IAAIN,UAAU,SAAAG,MAAQ,MAAAA,SAI7CpB,iBAAAQ,UAAAgB,SAAP,WACI,GAAIC,YAAa,GAAIC,WAAAC,QACjB,EACA,cACA,iBACA,IACA,EAKJzB,MAAKD,gBAAgB2B,OAAOH,YAAYR,UAAU,SAAAG,MAC9CK,WAAaL,KACbS,QAAQC,IAAI,WAAaL,WAAWF,GAAK,yBAY1CvB,iBAAAQ,UAAAuB,SAAP,SAAgBR,IAEZ,GAAIE,YAAa,GAAIC,WAAAC,QACjB,EACA,cACA,iBACA,IACA,EAIJzB,MAAKD,gBAAgB+B,OAAOT,GAAIE,YAAYR,UACxC,SAACG,MACGK,WAAaL,KACbS,QAAQC,IAAI,WAAaL,WAAWF,GAAK,uBAE7C,SAACU,OAAU,MAAAJ,SAAQC,IAAIG,UAOxBjC,iBAAAQ,UAAA0B,SAAP,SAAgBX,IAEZrB,KAAKD,gBAAgBkC,OAAOZ,IAAIN,UAC5B,SAACG,MACGS,QAAQC,IAAI,WAAaP,GAAGa,WAAa,uBAE7C,SAACH,OAAU,MAAAJ,SAAQC,IAAIG,UAInCjC,oBAxFaA,iBAAgBqC,YAf5BC,OAAAC,WACGC,SAAU,UACVC,YAAa,yDACbC,QAAS,2QAkB4BC,kBAAAC,kBAN5B5C","file":"spotify.component.js","sourcesContent":["\r\nimport { Component } from '@angular/core';\r\nimport { Observable } from 'rxjs/Rx';\r\nimport { SpotifyService } from './../services/spotify.service';\r\nimport { FormControl } from '@angular/forms';\r\nimport {Spotify} from './../models/spotify';\r\n\r\n@Component({\r\n    selector: 'spotify',\r\n    templateUrl: 'html/modules/spotify/components/spotify.component.html',\r\n    styles: [`.img {\r\n        position: relative;\r\n        float: left;\r\n        width: 100px;\r\n        height: 100px;\r\n        background-position: 50% 50 %;\r\n        background-repeat: no-repeat;\r\n        background-size: cover;\r\n        }\r\n`]\r\n})\r\n\r\nexport class SpotifyComponent {\r\n\r\n    public searchControl = new FormControl();\r\n    public isLoading: boolean = false;\r\n    public artists = [];\r\n\r\n    constructor(private _spotifyService: SpotifyService) { }\r\n\r\n    ngOnInit() {\r\n        this.searchControl.valueChanges\r\n            .filter(text => text.length > 3)\r\n            .debounceTime(400)\r\n            .distinctUntilChanged()\r\n            .subscribe(value => {\r\n                this.isLoading = true;\r\n                this.artists = [];\r\n                this._spotifyService.read(value)\r\n                    .subscribe(data => {\r\n                        this.isLoading = false;\r\n                        this.artists = data.artists.items;\r\n                    });\r\n            });\r\n    }\r\n\r\n\r\n    public onRead(id: number) {\r\n        this._spotifyService.read(id).subscribe(data => data);\r\n\r\n    }\r\n\r\n    public onInsert() {\r\n        let objSpotify = new Spotify(\r\n            2,\r\n            \"spotifyName\",\r\n            \"spotifyAddress\",\r\n            67,\r\n            true\r\n        );\r\n\r\n\r\n\r\n        this._spotifyService.create(objSpotify).subscribe(data => {\r\n            objSpotify = data;\r\n            console.log(\"Spotify \" + objSpotify.id + \" has been created.\");\r\n         \r\n        });\r\n\r\n        \r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    public onUpdate(id: number): void {\r\n\r\n        let objSpotify = new Spotify(\r\n            2,\r\n            \"spotifyName\",\r\n            \"spotifyAddress\",\r\n            67,\r\n            true\r\n        );\r\n\r\n\r\n        this._spotifyService.update(id, objSpotify).subscribe(\r\n            (data) => {\r\n                objSpotify = data;\r\n                console.log(\"Spotify \" + objSpotify.id + \" has been updated.\");\r\n            },\r\n            (error) => console.log(error)\r\n        );\r\n\r\n\r\n    }\r\n\r\n\r\n    public onDelete(id: number): void {\r\n\r\n        this._spotifyService.delete(id).subscribe(\r\n            (data) => {\r\n                console.log(\"Spotify \" + id.toString() + \" has been deleted.\");\r\n            },\r\n            (error) => console.log(error)\r\n        );\r\n    }\r\n\r\n}"]}