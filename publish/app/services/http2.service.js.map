{"version":3,"sources":["services/http2.service.ts"],"names":["Http2Service","_http","this","prototype","get","url","opts","app_setting_1","AppSettings","getRequestOptions","configureAuth","map","response","strAccessToken","headers","oJWT","JWT_1","JWT","setAuth","catch","handleError","post","data","put","delete","jWT","getAuth","accessToken","http_1","Headers","set","__decorate","core_1","Injectable","Http"],"mappings":"0+BAOaA,aAAY,WAErB,QAAAA,cAAoBC,OAAAC,KAAAD,MAAAA,MAuExB,MArEWD,cAAAG,UAAAC,IAAP,SAAWC,IAAKC,MAEZ,WAFY,KAAAA,OAAAA,KAAOC,cAAAC,YAAYC,qBAC/BP,KAAKQ,cAAcJ,MACZJ,KAAKD,MAAMG,IAAIC,IAAKC,MAAMK,IAC7B,SAAAC,UACI,GAAIC,gBAAiBD,SAASE,QAAQV,IAAI,iBACtCW,KAAO,GAAIC,OAAAC,IAAIJ,eAEnB,OADAN,eAAAC,YAAYU,QAAQH,MACbH,WAGVO,MAAMZ,cAAAC,YAAYY,cAGpBpB,aAAAG,UAAAkB,KAAP,SAAYhB,IAAKiB,KAAMhB,MAKnB,WALmB,KAAAA,OAAAA,KAAOC,cAAAC,YAAYC,qBAEtCP,KAAKQ,cAAcJ,MAGZJ,KAAKD,MAAMoB,KAAKhB,IAAKiB,KAAMhB,MAAMK,IACpC,SAAAC,UACI,GAAIC,gBAAiBD,SAASE,QAAQV,IAAI,iBACtCW,KAAO,GAAIC,OAAAC,IAAIJ,eAEnB,OADAN,eAAAC,YAAYU,QAAQH,MACbH,WAGVO,MAAMZ,cAAAC,YAAYY,cAKpBpB,aAAAG,UAAAoB,IAAP,SAAWlB,IAAKiB,KAAMhB,MAElB,WAFkB,KAAAA,OAAAA,KAAOC,cAAAC,YAAYC,qBACrCP,KAAKQ,cAAcJ,MACZJ,KAAKD,MAAMsB,IAAIlB,IAAKiB,KAAMhB,MAAMK,IACnC,SAAAC,UACI,GAAIC,gBAAiBD,SAASE,QAAQV,IAAI,iBACtCW,KAAO,GAAIC,OAAAC,IAAIJ,eAEnB,OADAN,eAAAC,YAAYU,QAAQH,MACbH,WAGVO,MAAMZ,cAAAC,YAAYY,cAGpBpB,aAAAG,UAAAqB,OAAP,SAAcnB,IAAKC,MAEf,WAFe,KAAAA,OAAAA,KAAOC,cAAAC,YAAYC,qBAClCP,KAAKQ,cAAcJ,MACZJ,KAAKD,MAAMuB,OAAOnB,IAAKC,MAAMK,IAChC,SAAAC,UACI,GAAIC,gBAAiBD,SAASE,QAAQV,IAAI,iBACtCW,KAAO,GAAIC,OAAAC,IAAIJ,eAEnB,OADAN,eAAAC,YAAYU,QAAQH,MACbH,WAGVO,MAAMZ,cAAAC,YAAYY,cAGnBpB,aAAAG,UAAAO,cAAR,SAAsBJ,MAClB,GAAImB,KAAMlB,cAAAC,YAAYkB,SACX,OAAPD,KAAkC,MAAnBA,IAAIE,cACC,MAAhBrB,KAAKQ,UACLR,KAAKQ,QAAU,GAAIc,QAAAC,SAEvBvB,KAAKQ,QAAQgB,IAAI,gBAAiB,SAASL,IAAIE,eAM3D3B,gBAzEaA,aAAY+B,YADxBC,OAAAC,6CAG8BL,OAAAM,QAFlBlC","file":"http2.service.js","sourcesContent":["\r\nimport {Injectable} from '@angular/core';\r\nimport {Http, Headers} from '@angular/http';\r\nimport {AppSettings} from './../app.setting'\r\nimport {JWT} from './../models/JWT';\r\n\r\n@Injectable()\r\nexport class Http2Service {\r\n\r\n    constructor(private _http: Http) {}\r\n\r\n    public get(url, opts = AppSettings.getRequestOptions()) {\r\n        this.configureAuth(opts);\r\n        return this._http.get(url, opts).map(\r\n            response => {\r\n                let strAccessToken = response.headers.get(\"Authorization\");\r\n                let oJWT = new JWT(strAccessToken);\r\n                AppSettings.setAuth(oJWT);\r\n                return response;\r\n            }\r\n        )\r\n            .catch(AppSettings.handleError);\r\n    }\r\n\r\n    public post(url, data, opts = AppSettings.getRequestOptions()) {\r\n\r\n        this.configureAuth(opts);\r\n\r\n\r\n        return this._http.post(url, data, opts).map(\r\n            response => {\r\n                let strAccessToken = response.headers.get(\"Authorization\");\r\n                let oJWT = new JWT(strAccessToken);\r\n                AppSettings.setAuth(oJWT);\r\n                return response;\r\n            }\r\n        )\r\n            .catch(AppSettings.handleError)\r\n\r\n        \r\n    }\r\n\r\n    public put(url, data, opts = AppSettings.getRequestOptions()) {\r\n        this.configureAuth(opts);\r\n        return this._http.put(url, data, opts).map(\r\n            response => {\r\n                let strAccessToken = response.headers.get(\"Authorization\");\r\n                let oJWT = new JWT(strAccessToken);\r\n                AppSettings.setAuth(oJWT);\r\n                return response;\r\n            }\r\n        )\r\n            .catch(AppSettings.handleError);\r\n    }\r\n\r\n    public delete(url, opts = AppSettings.getRequestOptions()) {\r\n        this.configureAuth(opts);\r\n        return this._http.delete(url, opts).map(\r\n            response => {\r\n                let strAccessToken = response.headers.get(\"Authorization\");\r\n                let oJWT = new JWT(strAccessToken);\r\n                AppSettings.setAuth(oJWT);\r\n                return response;\r\n            }\r\n        )\r\n            .catch(AppSettings.handleError);\r\n    }\r\n\r\n    private configureAuth(opts: any) {\r\n        let jWT = AppSettings.getAuth();\r\n        if (jWT != null && jWT.accessToken != null) {\r\n            if (opts.headers == null) {\r\n                opts.headers = new Headers();\r\n            }\r\n            opts.headers.set(\"Authorization\", `Bearer${jWT.accessToken}`);\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\n"]}